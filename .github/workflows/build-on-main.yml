name: Build on main

on:
  push:
    branches:
      - main
  schedule:
      - cron: '0 0 * * 2'

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install dependencies
      shell: cmd
      run: |
        C:\msys64\usr\bin\bash -lc "pacman -S --needed mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-nasm mingw-w64-x86_64-yasm mingw-w64-x86_64-ninja mingw-w64-x86_64-pkg-config mingw-w64-x86_64-meson mingw-w64-x86_64-SDL2 git base-devel autotools --noconfirm"
    - name: build
      shell: cmd
      run: |
        set MSYSTEM=MINGW64
        rem set HOME=${{ github.workspace }}
        rem set CFLAGS=-flto
        rem set CXXFLAGS=%CFLAGS%
        set LDFLAGS=-static -static-libgcc -static-libstdc++ -s
        C:\msys64\usr\bin\bash -lc "git clone -b 0.9.2 https://code.videolan.org/videolan/dav1d && cd dav1d && mkdir dav1d_build && cd dav1d_build && meson .. --buildtype release --default-library static --prefix=/mingw64/ && ninja && ninja install"
        C:\msys64\usr\bin\bash -lc "git clone https://github.com/fraunhoferhhi/vvdec && cd vvdec && mkdir gcc_cmake && cd gcc_cmake && cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/mingw64/ && ninja && ninja install"
        C:\msys64\usr\bin\bash -lc "git clone https://github.com/lehmann-c/FFmpeg"
        C:\msys64\usr\bin\bash -lc "cd ffmpeg && ./configure --disable-debug --enable-version3 --enable-gpl --enable-ffplay --enable-libdav1d --enable-libvvdec --pkg-config-flags=--static --enable-static && make -j 2"
        copy /y C:\msys64\home\%username%\ffmpeg\ffmpeg.exe ffmpeg.exe
        copy /y C:\msys64\home\%username%\ffmpeg\ffprobe.exe ffprobe.exe
        copy /y C:\msys64\home\%username%\ffmpeg\ffplay.exe ffplay.exe
        copy /y C:\msys64\home\%username%\vvdec\LICENSE.txt VVdeC_license.txt
        copy /y C:\msys64\home\%username%\dav1d\COPYING dav1d_COPYING.txt
        copy /y C:\msys64\home\%username%\ffmpeg\COPYING.GPLv3 ffmpeg_COPYING.txt
        7z a FFmpeg-VVCdecode.7z ffmpeg.exe ffprobe.exe ffplay.exe VVdeC_license.txt dav1d_COPYING.txt ffmpeg_COPYING.txt
    - name: Upload result
      uses: actions/upload-artifact@v2
      with:
        name: FFmpeg-VVCdecode
        path: |
          FFmpeg-VVCdecode.7z

  create_release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: actions/download-artifact@v2
      with:
        name: FFmpeg-VVCdecode
        path: artifacts
    
    - name: Get Date
      id: get_date
      run: |
        DATE_TIME=`date +'%Y-%m-%d-%H-%M-%S'`
        echo "::set-output name=DATE_TIME::${DATE_TIME}"        
    # https://github.com/Mr-Ojii/L-SMASH-Works-Auto-Builds
    - name: Create a Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_NAME=Build-${{ steps.get_date.outputs.DATE_TIME }}
        TAG_NAME=build-${{ steps.get_date.outputs.DATE_TIME }}
        assets=()
        for asset in ${{ github.workspace }}/artifacts/*.7z; do
          assets+=("-a" "$asset")
        done
        hub release create "${assets[@]}" -m "$RELEASE_NAME" "$TAG_NAME"
